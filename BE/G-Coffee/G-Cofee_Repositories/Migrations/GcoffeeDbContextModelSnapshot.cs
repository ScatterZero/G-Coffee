// <auto-generated />
using System;
using G_Cofee_Repositories.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace G_Cofee_Repositories.Migrations
{
    [DbContext(typeof(GcoffeeDbContext))]
    partial class GcoffeeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("G_Cofee_Repositories.Models.ComboPackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id")
                        .HasName("PK__ComboPackages__3214EC07");

                    b.ToTable("ComboPackages");
                });

            modelBuilder.Entity("G_Cofee_Repositories.Models.Inventory", b =>
                {
                    b.Property<Guid>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("InventoryID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)");

                    b.Property<decimal?>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("WarehouseId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("WarehouseID");

                    b.HasKey("InventoryId")
                        .HasName("PK__Inventor__F5FDE6D395371765");

                    b.HasIndex("WarehouseId");

                    b.HasIndex(new[] { "ProductId" }, "IDX_Inventory_ProductID");

                    b.ToTable("Inventory", (string)null);
                });

            modelBuilder.Entity("G_Cofee_Repositories.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("CheckoutUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<Guid>("ComboPackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("OrderCode")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Pending");

                    b.HasKey("Id")
                        .HasName("PK__Orders__3214EC07");

                    b.HasIndex("ComboPackageId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("G_Cofee_Repositories.Models.Payment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PaymentID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("PaymentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Pending");

                    b.Property<string>("SupplierId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SupplierID");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TransactionID");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("PaymentId")
                        .HasName("PK__Payments__9B556A5863035B0D");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("SupplierId");

                    b.HasIndex("TransactionId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("G_Cofee_Repositories.Models.Product", b =>
                {
                    b.Property<string>("ProductID")
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShortName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SupplierId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SupplierID");

                    b.Property<string>("UnitOfMeasureId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("UnitOfMeasureID");

                    b.Property<decimal?>("UnitPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("ProductID")
                        .HasName("PK__Products__177800D296728DEB");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UnitOfMeasureId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex(new[] { "ProductID" }, "IDX_Products_ProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("G_Cofee_Repositories.Models.Supplier", b =>
                {
                    b.Property<string>("SupplierId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SupplierID");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("SupplierId")
                        .HasName("PK__Supplier__4BE66694DD378E29");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("G_Cofee_Repositories.Models.Transaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TransactionID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Draft");

                    b.Property<string>("SupplierId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SupplierID");

                    b.Property<decimal?>("TotalAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal?>("TotalQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<DateOnly>("TransactionDate")
                        .HasColumnType("date");

                    b.Property<string>("TransactionNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("TransactionId")
                        .HasName("PK__Transact__55433A4BF0A9ADB7");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex(new[] { "TransactionNumber" }, "IDX_Transactions_TransactionNumber");

                    b.HasIndex(new[] { "TransactionNumber" }, "UQ__Transact__E733A2BFD789BA6C")
                        .IsUnique();

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("G_Cofee_Repositories.Models.TransactionDetail", b =>
                {
                    b.Property<Guid>("TransactionDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TransactionDetailID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("TotalPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TransactionID");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("WarehouseId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("WarehouseID");

                    b.HasKey("TransactionDetailId")
                        .HasName("PK__Transact__F2B27FE63411FC08");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ProductId");

                    b.HasIndex("TransactionId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("WarehouseId");

                    b.ToTable("TransactionDetails", t =>
                        {
                            t.HasTrigger("TRG_UpdateInventory");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("G_Cofee_Repositories.Models.UnitsOfMeasure", b =>
                {
                    b.Property<string>("UnitOfMeasureId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("UnitOfMeasureID");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("UnitOfMeasureId")
                        .HasName("PK__UnitsOfM__F36083115ED9A740");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("UnitsOfMeasure", (string)null);
                });

            modelBuilder.Entity("G_Cofee_Repositories.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("UserID");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CCAC2C74C238");

                    b.HasIndex(new[] { "Username" }, "UQ__Users__536C85E4BBCA6858")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("G_Cofee_Repositories.Models.Warehouse", b =>
                {
                    b.Property<string>("WarehouseId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("WarehouseID");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ManagerId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ManagerID");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("WarehouseId")
                        .HasName("PK__Warehous__2608AFD95DAF5031");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ManagerId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("G_Cofee_Repositories.Models.Inventory", b =>
                {
                    b.HasOne("G_Cofee_Repositories.Models.Warehouse", "Warehouse")
                        .WithMany("Inventories")
                        .HasForeignKey("WarehouseId")
                        .IsRequired()
                        .HasConstraintName("FK__Inventory__Wareh__59FA5E80");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("G_Cofee_Repositories.Models.Order", b =>
                {
                    b.HasOne("G_Cofee_Repositories.Models.ComboPackage", "ComboPackage")
                        .WithMany()
                        .HasForeignKey("ComboPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Orders__ComboPackageID__12345678");

                    b.Navigation("ComboPackage");
                });

            modelBuilder.Entity("G_Cofee_Repositories.Models.Payment", b =>
                {
                    b.HasOne("G_Cofee_Repositories.Models.User", "CreatedByNavigation")
                        .WithMany("PaymentCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__Payments__Create__7A672E12");

                    b.HasOne("G_Cofee_Repositories.Models.Supplier", "Supplier")
                        .WithMany("Payments")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK__Payments__Suppli__797309D9");

                    b.HasOne("G_Cofee_Repositories.Models.Transaction", "Transaction")
                        .WithMany("Payments")
                        .HasForeignKey("TransactionId")
                        .IsRequired()
                        .HasConstraintName("FK__Payments__Transa__787EE5A0");

                    b.HasOne("G_Cofee_Repositories.Models.User", "UpdatedByNavigation")
                        .WithMany("PaymentUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Payments__Update__7B5B524B");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Supplier");

                    b.Navigation("Transaction");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("G_Cofee_Repositories.Models.Product", b =>
                {
                    b.HasOne("G_Cofee_Repositories.Models.User", "CreatedByNavigation")
                        .WithMany("ProductCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__Products__Create__5165187F");

                    b.HasOne("G_Cofee_Repositories.Models.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK__Products__Suppli__4F7CD00D");

                    b.HasOne("G_Cofee_Repositories.Models.UnitsOfMeasure", "UnitOfMeasure")
                        .WithMany("Products")
                        .HasForeignKey("UnitOfMeasureId")
                        .IsRequired()
                        .HasConstraintName("FK__Products__UnitOf__5070F446");

                    b.HasOne("G_Cofee_Repositories.Models.User", "UpdatedByNavigation")
                        .WithMany("ProductUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Products__Update__52593CB8");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Supplier");

                    b.Navigation("UnitOfMeasure");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("G_Cofee_Repositories.Models.Supplier", b =>
                {
                    b.HasOne("G_Cofee_Repositories.Models.User", "CreatedByNavigation")
                        .WithMany("SupplierCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__Suppliers__Creat__440B1D61");

                    b.HasOne("G_Cofee_Repositories.Models.User", "UpdatedByNavigation")
                        .WithMany("SupplierUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Suppliers__Updat__44FF419A");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("G_Cofee_Repositories.Models.Transaction", b =>
                {
                    b.HasOne("G_Cofee_Repositories.Models.User", "CreatedByNavigation")
                        .WithMany("TransactionCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__Transacti__Creat__656C112C");

                    b.HasOne("G_Cofee_Repositories.Models.Supplier", "Supplier")
                        .WithMany("Transactions")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK__Transacti__Suppl__6477ECF3");

                    b.HasOne("G_Cofee_Repositories.Models.User", "UpdatedByNavigation")
                        .WithMany("TransactionUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Transacti__Updat__66603565");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Supplier");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("G_Cofee_Repositories.Models.TransactionDetail", b =>
                {
                    b.HasOne("G_Cofee_Repositories.Models.User", "CreatedByNavigation")
                        .WithMany("TransactionDetailCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__Transacti__Creat__6EF57B66");

                    b.HasOne("G_Cofee_Repositories.Models.Product", "BarcodeNavigation")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK__Transacti__Barco__6D0D32F4");

                    b.HasOne("G_Cofee_Repositories.Models.Transaction", "Transaction")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("TransactionId")
                        .IsRequired()
                        .HasConstraintName("FK__Transacti__Trans__6C190EBB");

                    b.HasOne("G_Cofee_Repositories.Models.User", "UpdatedByNavigation")
                        .WithMany("TransactionDetailUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Transacti__Updat__6FE99F9F");

                    b.HasOne("G_Cofee_Repositories.Models.Warehouse", "Warehouse")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("WarehouseId")
                        .HasConstraintName("FK__Transacti__Wareh__6E01572D");

                    b.Navigation("BarcodeNavigation");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Transaction");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("G_Cofee_Repositories.Models.UnitsOfMeasure", b =>
                {
                    b.HasOne("G_Cofee_Repositories.Models.User", "CreatedByNavigation")
                        .WithMany("UnitsOfMeasureCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__UnitsOfMe__Creat__48CFD27E");

                    b.HasOne("G_Cofee_Repositories.Models.User", "UpdatedByNavigation")
                        .WithMany("UnitsOfMeasureUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__UnitsOfMe__Updat__49C3F6B7");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("G_Cofee_Repositories.Models.Warehouse", b =>
                {
                    b.HasOne("G_Cofee_Repositories.Models.User", "CreatedByNavigation")
                        .WithMany("WarehouseCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__Warehouse__Creat__3E52440B");

                    b.HasOne("G_Cofee_Repositories.Models.User", "Manager")
                        .WithMany("WarehouseManagers")
                        .HasForeignKey("ManagerId")
                        .HasConstraintName("FK__Warehouse__Manag__3D5E1FD2");

                    b.HasOne("G_Cofee_Repositories.Models.User", "UpdatedByNavigation")
                        .WithMany("WarehouseUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Warehouse__Updat__3F466844");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Manager");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("G_Cofee_Repositories.Models.Product", b =>
                {
                    b.Navigation("TransactionDetails");
                });

            modelBuilder.Entity("G_Cofee_Repositories.Models.Supplier", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Products");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("G_Cofee_Repositories.Models.Transaction", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("TransactionDetails");
                });

            modelBuilder.Entity("G_Cofee_Repositories.Models.UnitsOfMeasure", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("G_Cofee_Repositories.Models.User", b =>
                {
                    b.Navigation("PaymentCreatedByNavigations");

                    b.Navigation("PaymentUpdatedByNavigations");

                    b.Navigation("ProductCreatedByNavigations");

                    b.Navigation("ProductUpdatedByNavigations");

                    b.Navigation("SupplierCreatedByNavigations");

                    b.Navigation("SupplierUpdatedByNavigations");

                    b.Navigation("TransactionCreatedByNavigations");

                    b.Navigation("TransactionDetailCreatedByNavigations");

                    b.Navigation("TransactionDetailUpdatedByNavigations");

                    b.Navigation("TransactionUpdatedByNavigations");

                    b.Navigation("UnitsOfMeasureCreatedByNavigations");

                    b.Navigation("UnitsOfMeasureUpdatedByNavigations");

                    b.Navigation("WarehouseCreatedByNavigations");

                    b.Navigation("WarehouseManagers");

                    b.Navigation("WarehouseUpdatedByNavigations");
                });

            modelBuilder.Entity("G_Cofee_Repositories.Models.Warehouse", b =>
                {
                    b.Navigation("Inventories");

                    b.Navigation("TransactionDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
